# Patch to add Excel export button to the UI

--- app.py.orig
+++ app.py
@@ -5950,6 +5950,50 @@
         col_pdf, col_spacer = st.columns([1,7])
         
         with col_pdf:
+            # PDF Export button with loading state - ensure consistent styling
+            pdf_clicked, pdf_button_placeholder = create_loading_button(
+                "Try PDF Export",
+                key="global_pdf_export",
+                help="Attempt to generate PDF report",
+                type="primary",
+                use_container_width=True
+            )
+            
+            if pdf_clicked:
+                # Show loading state immediately
+                show_button_loading(pdf_button_placeholder, "Generating PDF...")
+                
+                # Get loading message for PDF generation
+                loading_msg, loading_subtitle = get_loading_message_for_action("generate_pdf")
+                
+                # Show loading indicator
+                loading_container = st.empty()
+                with loading_container.container():
+                    display_loading_spinner(loading_msg, loading_subtitle)
+                
+                try:
+                    pdf_bytes = generate_comprehensive_pdf() 
+                    if pdf_bytes:
+                        # Create a unique filename with timestamp
+                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
+                        property_part = st.session_state.property_name.replace(" ", "_") if hasattr(st.session_state, 'property_name') and st.session_state.property_name else "Property"
+                        
+                        # Clear loading states
+                        loading_container.empty()
+                        restore_button(pdf_button_placeholder, "Try PDF Export", key="global_pdf_export_success", type="primary", use_container_width=True)
+                        
+                        # Check if we have HTML content (fallback) or PDF content
+                        if not WEASYPRINT_AVAILABLE and pdf_bytes and b'<!DOCTYPE html>' in pdf_bytes[:50]:
+                            # We have HTML content (fallback case)
+                            html_filename = f"NOI_Analysis_{property_part}_{timestamp}.html"
+                            st.download_button(
+                                label="üì• Download Printable Report (HTML)",
+                                data=pdf_bytes,
+                                file_name=html_filename,
+                                mime="text/html",
+                                key=f"download_html_report_{timestamp}",
+                                type="primary",
+                                use_container_width=True
+                            )
+                            st.info("üìÑ **Printable Report Ready!**\n\n"
+                                   "üì• **Download the HTML file above** and open it in your browser.\n"
+                                   "üñ®Ô∏è Use your browser's Print function (Ctrl+P) and select 'Save as PDF' to create a PDF.\n\n"
+                                   "*Your analysis data is complete and ready to use!*")
+                        elif WEASYPRINT_AVAILABLE and pdf_bytes:
+                            # We have actual PDF content
+                            pdf_filename = f"NOI_Analysis_{property_part}_{timestamp}.pdf"
+                            st.download_button(
+                                label="üì• Download Complete PDF Report",
+                                data=pdf_bytes,
+                                file_name=pdf_filename,
+                                mime="application/pdf",
+                                key=f"download_comprehensive_pdf_{timestamp}",  # Ensure unique key
+                                type="primary",
+                                use_container_width=True
+                            )
+                            # Show success message
+                            show_processing_status("PDF report generated successfully!", status_type="success")
+                        else:
+                            # Handle case where pdf_bytes is None or empty
+                            st.error("‚ùå Failed to generate PDF report. Please try again or contact support.")
+                    else:
+                        # Clear loading states on failure
+                        loading_container.empty()
+                        restore_button(pdf_button_placeholder, "Try PDF Export", key="global_pdf_export_failure", type="primary", use_container_width=True)
+                        st.info("üìÑ **PDF generation is currently unavailable**, but your analysis is complete!\n\n"
+                               "üìä **You can still access all your results:**\n"
+                               "‚Ä¢ View all charts and analysis above\n"
+                               "‚Ä¢ Use the Excel export button for downloadable data\n"
+                               "‚Ä¢ Copy any text or insights you need\n\n"
+                               "*All your analysis data is ready to use!*")
+                except Exception as e:
+                    # Clear loading states on failure
+                    loading_container.empty()
+                    restore_button(pdf_button_placeholder, "Try PDF Export", key="global_pdf_export_error", type="primary", use_container_width=True)
+                    st.info("üîß **PDF generation encountered an issue**, but don't worry!\n\n"
+                           "üìà **Your analysis is complete and available:**\n"
+                           "‚Ä¢ All charts and insights are displayed above\n"
+                           "‚Ä¢ Excel export is working perfectly\n"
+                           "‚Ä¢ You can copy any text or data you need\n\n"
+                           "*No data was lost - everything is ready to use!*")
+                    logger.error(f"PDF generation error: {str(e)}")
+        
+        # Add Excel Export button
+        with col_pdf:
             # PDF Export button with loading state - ensure consistent styling
             pdf_clicked, pdf_button_placeholder = create_loading_button(
                 "Try PDF Export",
@@ -5957,6 +6001,50 @@
                 help="Attempt to generate PDF report (Excel export also available below)",
                 type="primary",
                 use_container_width=True
+            )
+            
+            # Add Excel Export button
+            st.markdown("---")
+            excel_clicked, excel_button_placeholder = create_loading_button(
+                "Export Excel",
+                key="global_excel_export",
+                help="Export comparison data to Excel format",
+                type="primary",
+                use_container_width=True
+            )
+            
+            if excel_clicked:
+                # Show loading state immediately
+                show_button_loading(excel_button_placeholder, "Generating Excel...")
+                
+                # Get loading message for Excel generation
+                loading_msg, loading_subtitle = get_loading_message_for_action("generate_excel")
+                
+                # Show loading indicator
+                loading_container = st.empty()
+                with loading_container.container():
+                    display_loading_spinner(loading_msg, loading_subtitle)
+                
+                try:
+                    excel_bytes = generate_comparison_excel()
+                    if excel_bytes:
+                        # Create a unique filename with timestamp
+                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
+                        property_part = st.session_state.property_name.replace(" ", "_") if hasattr(st.session_state, 'property_name') and st.session_state.property_name else "Property"
+                        
+                        # Clear loading states
+                        loading_container.empty()
+                        restore_button(excel_button_placeholder, "Export Excel", key="global_excel_export_success", type="primary", use_container_width=True)
+                        
+                        # We have Excel content
+                        excel_filename = f"NOI_Comparison_{property_part}_{timestamp}.xlsx"
+                        st.download_button(
+                            label="üì• Download Excel Report",
+                            data=excel_bytes,
+                            file_name=excel_filename,
+                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
+                            key=f"download_excel_report_{timestamp}",
+                            type="primary",
+                            use_container_width=True
+                        )
+                        # Show success message
+                        show_processing_status("Excel report generated successfully!", status_type="success")
+                    else:
+                        # Clear loading states on failure
+                        loading_container.empty()
+                        restore_button(excel_button_placeholder, "Export Excel", key="global_excel_export_failure", type="primary", use_container_width=True)
+                        st.error("‚ùå Failed to generate Excel report. Please try again or contact support.")
+                except Exception as e:
+                    # Clear loading states on failure
+                    loading_container.empty()
+                    restore_button(excel_button_placeholder, "Export Excel", key="global_excel_export_error", type="primary", use_container_width=True)
+                    st.error(f"üîß Excel generation encountered an issue: {str(e)}")
+                    logger.error(f"Excel generation error: {str(e)}", exc_info=True)
 
     # Legal Footer - Terms of Service and Privacy Policy