import streamlit as st
import logging
from typing import Optional

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('storyteller_display')

def display_financial_narrative(narrative: str, property_name: Optional[str] = None):
    """
    Display the financial narrative in the Streamlit UI with a clean, professional look.
    
    Args:
        narrative: The generated financial narrative text
        property_name: The name of the property (optional)
    """
    logger.info(f"Displaying financial narrative for property: {property_name or 'Unknown'}")
    
    # Apply custom CSS for the narrative display
    st.markdown("""
    <style>
    .financial-story-container {
        background-color: rgba(30, 41, 59, 0.8);
        padding: 24px;
        border-radius: 10px;
        border-left: 6px solid #4DB6AC;
        margin-bottom: 25px;
        box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.25);
    }
    .story-title {
        color: #4DB6AC;
        font-size: 1.5rem;
        margin-bottom: 16px;
        font-weight: 600;
    }
    .story-content {
        color: #F0F0F0;
        font-size: 1rem;
        line-height: 1.5;
        white-space: pre-line;
    }
    .edit-button {
        margin-top: 10px;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Display the narrative with proper formatting
    st.markdown(f"""
    <div class="financial-story-container">
        <div class="story-title">Financial Performance Narrative{f" - {property_name}" if property_name else ""}</div>
        <div class="story-content">{narrative}</div>
    </div>
    """, unsafe_allow_html=True)
    
    # Create a text area for editing the narrative
    if "show_narrative_editor" not in st.session_state:
        st.session_state.show_narrative_editor = False
        
    if "edited_narrative" not in st.session_state:
        st.session_state.edited_narrative = narrative
    
    # Button to show/hide the editor
    if st.button("Edit Narrative", key="edit_narrative_button"):
        st.session_state.show_narrative_editor = not st.session_state.show_narrative_editor
        st.session_state.edited_narrative = narrative
    
    # Display the editor if show_narrative_editor is True
    if st.session_state.show_narrative_editor:
        st.markdown("<div class='edit-subtitle'>Edit the narrative below:</div>", unsafe_allow_html=True)
        
        # Text area for editing with generous height
        edited_text = st.text_area(
            "Edit Narrative",
            value=st.session_state.edited_narrative,
            height=400,
            key="narrative_editor"
        )
        
        # Save button
        col1, col2 = st.columns([1, 5])
        with col1:
            if st.button("Save Changes", key="save_narrative"):
                st.session_state.edited_narrative = edited_text
                st.success("Narrative updated!")
                
        with col2:
            if st.button("Discard Changes", key="discard_narrative"):
                st.session_state.edited_narrative = narrative
                st.info("Changes discarded.")
    
    # Add a caption about AI generation
    st.caption("This narrative was generated by AI based on the financial data. You can edit it to customize for your specific needs.")

def display_narrative_in_tabs():
    """
    Alternative display method that shows the narrative in a tabbed interface
    alongside other analysis tabs.
    """
    tab_title = "Financial Story"
    
    if "edited_narrative" in st.session_state:
        narrative = st.session_state.edited_narrative
    elif "generated_narrative" in st.session_state:
        narrative = st.session_state.generated_narrative
    else:
        narrative = "No financial narrative has been generated yet."
    
    property_name = st.session_state.get("property_name", None)
    
    # Display the narrative without the surrounding container (will be in a tab)
    st.markdown(f"""
    <div class="story-title">Financial Performance Narrative{f" - {property_name}" if property_name else ""}</div>
    <div class="story-content">{narrative}</div>
    """, unsafe_allow_html=True)
    
    # Button to edit the narrative
    if st.button("Edit Narrative", key="edit_tab_narrative"):
        st.session_state.show_narrative_editor = True
    
    # Display editor if enabled
    if st.session_state.get("show_narrative_editor", False):
        edited_text = st.text_area(
            "Edit Narrative",
            value=narrative,
            height=400,
            key="tab_narrative_editor"
        )
        
        col1, col2 = st.columns([1, 5])
        with col1:
            if st.button("Save Changes", key="save_tab_narrative"):
                st.session_state.edited_narrative = edited_text
                st.session_state.generated_narrative = edited_text  # Keep in sync
                st.success("Narrative updated!")
                st.session_state.show_narrative_editor = False
        
        with col2:
            if st.button("Discard Changes", key="discard_tab_narrative"):
                st.session_state.show_narrative_editor = False
                st.info("Changes discarded.") 